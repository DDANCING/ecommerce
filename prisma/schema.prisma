generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  bio                   String?
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?
  stores                Store[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Visitor {
  id         String   @id @default(uuid())
  date       DateTime @unique
  mobile     Int      @default(0)
  web        Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Store {
  id         String       @id @default(uuid())
  name       String
  userId     String
  user       User         @relation(fields: [userId], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  billboards Billboard[]  @relation("StoreToBillboard")
  categories Category[]   @relation("StoreToCategory")
  sizes      Size[]       @relation("StoreToSize")
  colors     Color[]      @relation("StoreToColor")
  products   Product[]    @relation("StoreToProduct")


}

model Billboard {
  id              String        @id @default(uuid())
  storeId         String
  store           Store         @relation("StoreToBillboard", fields: [storeId], references: [id])
  label           String
  subtitle        String?
  category        String?
  description     String?
  imageUrl        String

  callToActionId  String?       @unique
  callToAction    CallToAction? @relation(fields: [callToActionId], references: [id])

  categories      Category[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([storeId])
}

model CallToAction {
  id        String     @id @default(uuid())
  text      String?
  href      String?

  billboard Billboard?
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String @id @default(uuid())
  storeId   String
  store     Store @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[]

  @@index([storeId])
}

model Color {
  id        String @id @default(uuid())
  storeId   String
  store     Store @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products  Product[]

  @@index([storeId])
}

model Product {
  id String @id @default(uuid())
  sku Int?
  storeId String
  store Store @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name String
  price Decimal
  originalPrice Decimal?
  rating Int?
  description String?
  reviewCount Int?
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String
  size Size @relation(fields: [sizeId], references: [id])
  colorId String
  color Color @relation(fields: [colorId], references: [id])
  orderItems OrderItem[]
  images Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String @id @default(uuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Buyer {
  id           String   @id @default(uuid())
  fullName     String
  document     String?   @db.VarChar(18) @unique
  email        String   @unique
  phone        String?

  address      String?
  number       String?
  complement   String?
  neighborhood String?
  city         String?
  state        String?
  cep          String?  @db.VarChar(9)

  orders       Order[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Order {
  id             String       @id @default(uuid())

  buyerId        String
  buyer          Buyer        @relation(fields: [buyerId], references: [id])
  orderItems     OrderItem[]

  isPaid         Boolean      @default(false)
  paymentMethod  String?
  installments   Int?        
  status         String?
  totalAmount    Decimal?

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([buyerId])
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int      @default(1)
  unitPrice  Decimal  
  subtotal   Decimal 

  @@index([orderId])
  @@index([productId])
  @@unique([orderId, productId])
}


enum UserRole {
  ADMIN
  USER
  SELLER
  OWNER
}
